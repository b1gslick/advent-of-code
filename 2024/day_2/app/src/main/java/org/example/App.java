/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import javax.swing.text.html.HTMLDocument.Iterator;

import java.util.ArrayList;

public class App {
  public List<String> readLines(String path) {
    List<String> allLines = new ArrayList<String>();
    try {
      allLines = Files.readAllLines(Paths.get(path));
    } catch (IOException e) {
      e.printStackTrace();
    }
    return allLines;
  }

  private boolean matchCriteria(int number, int prev) {
    int highBorder = 3;
    int lowBorder = 1;
    int result = Math.abs(prev - number);
    return lowBorder <= result && result <= highBorder;
  }

  public boolean isIncrease(String[] arr) {
    int currNumber = Integer.parseInt(arr[0]) - 1;
    for (String a : arr) {
      int number = Integer.parseInt(a);
      boolean inc = number > currNumber;
      if (!inc || !matchCriteria(number, currNumber)) {
        return false;
      }
      currNumber = number;
    }
    return true;
  }

  public boolean isDecrease(String[] arr) {
    int currNumber = Integer.parseInt(arr[0]) + 1;
    for (String a : arr) {
      int num = Integer.parseInt(a);
      boolean dec = currNumber > num;
      if (!dec || !matchCriteria(num, currNumber)) {
        return false;
      }
      currNumber = num;
    }
    return true;
  }

  public boolean isSafe(String line) {
    String[] arr = line.split(" ");
    int first = Integer.parseInt(arr[0]);
    int second = Integer.parseInt(arr[1]);
    if (first < second) {
      return this.isIncrease(arr);
    } else if (first > second) {
      return this.isDecrease(arr);
    } else {
      return false;
    }
  }

  public boolean isSafeAdv(String line) {
    String[] arr = line.split(" ");
    boolean decrease = true;
    boolean increase = true;
    boolean ok = true;
    boolean first_time = true;
    for (int i = 0; i < arr.length - 1; i++) {
      int diff = Integer.parseInt(arr[i + 1]) - Integer.parseInt(arr[i]);
      if (diff > 0) {
        decrease = false;
      }
      if (diff < 0) {
        increase = false;
      }
      if (!(1 <= Math.abs(diff) && Math.abs(diff) <= 3)) {
        if (first_time) {
          first_time = false;
          int new_diff1 = Integer.parseInt(arr[i + 2]) - Integer.parseInt(arr[i]);
          int new_diff2 = Integer.parseInt(arr[i + 2]) - Integer.parseInt(arr[i + 1]);
          if ((!(1 <= Math.abs(new_diff1) && Math.abs(new_diff1) <= 3))
              || (!(1 <= Math.abs(new_diff2) && Math.abs(new_diff2) <= 3))) {

            ok = false;
            break;

          }

        } else {
          ok = false;
          break;

        }
      }
    }
    return ok && (decrease || increase);
  }

  public boolean withRepeat(String line) {
    return false;

  }

  public static void main(String[] args) {
  }
}
