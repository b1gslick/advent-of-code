/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.util.ArrayList;

public class App {
  public List<String> readLines(String path) {
    List<String> allLines = new ArrayList<String>();
    try {
      allLines = Files.readAllLines(Paths.get(path));
    } catch (IOException e) {
      e.printStackTrace();
    }
    return allLines;
  }

  public Integer calculateTokensSumm(HashMap<Integer, HashMap<String, List<Integer>>> toCalc) {
    var A = 0;
    var B = 0;
    for (var claws : toCalc.values()) {
      var t = this.pressTimes(claws);
      if (t.size() > 0) {
        if ((t.get(0) < 100) && (t.get(1) < 100)) {
          A += t.get(0);
          B += t.get(1);
        }
      }
    }
    return (A * 3) + (B * 1);
  }

  public List<Integer> pressTimes(HashMap<String, List<Integer>> toFind) {
    var result = new ArrayList<Integer>();
    Integer a_x = toFind.get("A").get(0);
    Integer a_y = toFind.get("A").get(1);
    Integer b_x = toFind.get("B").get(0);
    Integer b_y = toFind.get("B").get(1);
    Integer p_x = toFind.get("P").get(0);
    Integer p_y = toFind.get("P").get(1);
    var px = p_x;
    var py = p_y;
    while (!((px % a_x == 0) && (py % a_y == 0))) {
      px -= b_x;
      py -= b_y;
      if ((px < 0) || (py < 0)) {
        return result;
      }
      if ((px == 0) && (py == 0)) {
        System.out.println(toFind);
        result.add(0);
        result.add((p_x - px) / b_x);
      }
    }
    // if (((px / a_x) == (py / a_y)) && ((p_x - px) / b_x == (p_y - py) / b_y)) {
    result.add(px / a_x);
    result.add((p_x - px) / b_x);
    return result;
    // }
    // return result;
  }

  public HashMap<Integer, HashMap<String, List<Integer>>> buildMap(List<String> data) {
    HashMap<Integer, HashMap<String, List<Integer>>> result = new HashMap<Integer, HashMap<String, List<Integer>>>();
    Pattern patternA = Pattern.compile("Button A: X\\+\\d+, Y\\+\\d+", Pattern.CASE_INSENSITIVE);
    Pattern patternB = Pattern.compile("Button B: X\\+\\d+, Y\\+\\d+", Pattern.CASE_INSENSITIVE);
    Pattern patPrize = Pattern.compile("X=\\d+, Y=\\d+", Pattern.CASE_INSENSITIVE);
    Pattern digit = Pattern.compile("\\d+");

    Integer i = 0;

    for (String line : data) {
      HashMap<String, List<Integer>> small = new HashMap<String, List<Integer>>();
      Matcher matcherA = patternA.matcher(line);
      Matcher matcherB = patternB.matcher(line);
      Matcher prize = patPrize.matcher(line);

      List<Integer> res = new ArrayList<Integer>();

      if (matcherA.find()) {
        String[] rawA = matcherA.group().split(",");

        for (String l : rawA) {
          Matcher d = digit.matcher(l);
          d.find();
          Integer num = Integer.parseInt(d.group(0));
          res.add(num);
        }
        small.put("A", res);

      } else if (matcherB.find()) {
        String[] rawB = matcherB.group().split(",");

        for (String l : rawB) {
          Matcher d = digit.matcher(l);
          d.find();
          Integer num = Integer.parseInt(d.group(0));
          res.add(num);
        }
        small.put("B", res);

      } else if (prize.find()) {
        String[] rawP = prize.group().split(",");

        for (String l : rawP) {
          Matcher d = digit.matcher(l);
          d.find();
          Integer num = Integer.parseInt(d.group(0));
          res.add(num);
        }
        small.put("P", res);

      } else {
        continue;
      }

      if (result.get(i) != null) {
        var temp = result.get(i);
        for (String t : small.keySet()) {
          temp.put(t, small.get(t));
        }
        result.put(i, temp);
      } else {
        result.put(i, small);
      }
      if (result.get(i).size() % 3 == 0) {
        i++;
      }
    }

    return result;
  }

  public static void main(String[] args) {
  }
}
